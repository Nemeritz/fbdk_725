<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE FBType SYSTEM "http://www.holobloc.com/xml/LibraryElement.dtd" >
<FBType Name="ConveyorCTL_Multicast" Comment="Basic Function Block Type" >
  <Identification Standard="61499-2" />
  <VersionInfo Organization="Rockwell Automation" Version="0.2" Author="JHC" Date="2003-12-04" Remarks="Renamed for better indexing." />
  <VersionInfo Organization="Rockwell Automation" Version="0.1" Author="JHC" Date="2002-11-05" Remarks="Corrected missing ST element in Algorithm REQ." />
  <VersionInfo Organization="Rockwell Automation" Version="0.0" Author="JHC" Date="2000-05-30" />
  <CompilerInfo header="package fb.rt.cs725;" >
  </CompilerInfo>
  <InterfaceList>
    <EventInputs>
      <Event Name="INIT" Comment="Initialization Request" >
        <With Var="PE" />
        <With Var="Block" />
        <With Var="Candidate" />
        <With Var="reqTime" />
        <With Var="PEexit" />
        <With Var="inReq" />
        <With Var="inResponse" />
      </Event>
      <Event Name="REQ" Comment="Normal Execution Request" >
        <With Var="PE" />
        <With Var="Block" />
        <With Var="Candidate" />
        <With Var="reqTime" />
        <With Var="PEexit" />
        <With Var="inReq" />
        <With Var="inResponse" />
      </Event>
      <Event Name="CAS_STOP" >
      </Event>
      <Event Name="CAS_START" >
      </Event>
    </EventInputs>
    <EventOutputs>
      <Event Name="INITO" Comment="Initialization Confirm" >
        <With Var="MotoRotate" />
        <With Var="BlockCon" />
        <With Var="outTime" />
        <With Var="outReq" />
        <With Var="outResponse" />
      </Event>
      <Event Name="CNF" Comment="Execution Confirmation" >
        <With Var="MotoRotate" />
        <With Var="BlockCon" />
        <With Var="outTime" />
        <With Var="outReq" />
        <With Var="outResponse" />
      </Event>
      <Event Name="STOP" >
      </Event>
      <Event Name="START" >
      </Event>
    </EventOutputs>
    <InputVars>
      <VarDeclaration Name="PE" Type="BOOL" Comment="Input event qualifier" />
      <VarDeclaration Name="Block" Type="BOOL" />
      <VarDeclaration Name="Candidate" Type="BOOL" />
      <VarDeclaration Name="reqTime" Type="INT" />
      <VarDeclaration Name="PEexit" Type="BOOL" />
      <VarDeclaration Name="inReq" Type="BOOL" />
      <VarDeclaration Name="inResponse" Type="BOOL" />
    </InputVars>
    <OutputVars>
      <VarDeclaration Name="MotoRotate" Type="BOOL" Comment="Output event qualifier" />
      <VarDeclaration Name="BlockCon" Type="BOOL" />
      <VarDeclaration Name="outTime" Type="INT" />
      <VarDeclaration Name="outReq" Type="BOOL" />
      <VarDeclaration Name="outResponse" Type="BOOL" />
    </OutputVars>
  </InterfaceList>
  <BasicFB>
    <InternalVars>
      <VarDeclaration Name="lastPE" Type="BOOL" InitialValue="1" />
      <VarDeclaration Name="lastBlock" Type="BOOL" InitialValue="0" />
      <VarDeclaration Name="state" Type="INT" InitialValue="0" />
      <VarDeclaration Name="timeStamp" Type="INT" InitialValue="0" />
      <VarDeclaration Name="savedReqTime" Type="INT" InitialValue="0" />
    </InternalVars>
    <ECC >
      <ECState Name="START" Comment="Initial State" x="555.55554" y="427.77777" >
      </ECState>
      <ECState Name="INIT" Comment="Initialization" x="922.22217" y="138.88889" >
        <ECAction Algorithm="INIT" Output="INITO" />
        <ECAction Output="CNF" />
      </ECState>
      <ECState Name="REQ" Comment="Normal execution" x="222.22221" y="972.22217" >
        <ECAction Algorithm="REQ" Output="CNF" />
      </ECState>
      <ECState Name="CAS_START" x="1300.0" y="1294.4443" >
        <ECAction Algorithm="START" Output="START" />
        <ECAction Output="CNF" />
      </ECState>
      <ECState Name="CAS_STOP" x="1538.8888" y="700.0" >
        <ECAction Algorithm="STOP" Output="STOP" />
        <ECAction Output="CNF" />
      </ECState>
      <ECTransition Source="START" Destination="INIT" Condition="INIT" x="922.22217" y="427.77777" />
      <ECTransition Source="INIT" Destination="START" Condition="1" x="555.55554" y="138.88889" />
      <ECTransition Source="START" Destination="REQ" Condition="REQ&#38;Candidate" x="555.55554" y="716.6666" />
      <ECTransition Source="REQ" Destination="START" Condition="1" x="222.22221" y="644.4444" />
      <ECTransition Source="START" Destination="CAS_START" Condition="CAS_START" x="966.6666" y="1066.6666" />
      <ECTransition Source="CAS_START" Destination="START" Condition="1" x="1216.6666" y="1005.55554" />
      <ECTransition Source="START" Destination="CAS_STOP" Condition="CAS_STOP" x="1111.1111" y="700.0" />
      <ECTransition Source="CAS_STOP" Destination="START" Condition="1" x="1405.5555" y="583.3333" />
    </ECC>
  <Algorithm Name="INIT" Comment="Initialization algorithm" >
    <ST Text="MotoRotate := TRUE;&#10;Block := FALSE;&#10;&#10;System.out.println(this + &#34; &#34; + MotoRotate);&#10;System.out.println(MotoRotate);&#10;" />
  </Algorithm>
  <Algorithm Name="REQ" Comment="Normally executed algorithm" >
    <Other Language="Java" Text="//state = 0,1,2 (released,wanted,held)&#10;&#10;if (Candidate.value) {&#10; if (inResponse.value) {&#10;  state.value = 2;&#10; } else if (!PE.value) {&#10;  state.value = 1;&#10; } else {&#10;  state.value = 0;&#10; }&#10; &#10;  if (lastBlock.value != Block.value) {&#10;   if (Block.value) {&#10;    STOP.serviceEvent(this);&#10;    MotoRotate.value = false;&#10;    System.out.println(&#34;Cas Stop&#34;);&#10;   } else {&#10;    START.serviceEvent(this);&#10;    MotoRotate.value = true;&#10;    System.out.println(&#34;Cas Start&#34;);&#10;&#10;   }&#10;   lastBlock.value = Block.value;&#10;  }&#10;  &#10; if (state.value == 0) {&#10;  outReq.value = false;&#10;  BlockCon.value = false;&#10;  outResponse.value = false;&#10;  MotoRotate.value = true;&#10;  if (inReq.value) {&#10;   outResponse.value = true;&#10;  }&#10; }&#10; else if (state.value == 1) {&#10;  if (inReq.value) {&#10;   if (reqTime.value &#60; savedReqTime.value) {&#10;    outResponse.value = true;&#10;   } else {&#10;    outResponse.value = false;&#10;   }&#10;  }&#10;  outReq.value = true;&#10;  outTime.value = timeStamp.value;&#10;  savedReqTime.value = timeStamp.value;&#10;  BlockCon.value = true;&#10; }&#10; else {&#10;  outReq.value = false;&#10;  BlockCon.value = false;&#10;  outResponse.value = false;&#10;  if (!PEexit) {&#10;   state = 0;&#10;  }&#10; }&#10;}&#10;&#10;timeStamp++;&#10;" />
  </Algorithm>
  <Algorithm Name="START" >
    <ST Text="MotoRotate:=TRUE;&#10;System.out.println(this + &#34;//////////////////////////////////////////////////////////////// Start &#34; + MotoRotate);&#10;" />
  </Algorithm>
  <Algorithm Name="STOP" >
    <ST Text="MotoRotate := FALSE;&#10;System.out.println(this + &#34;/////////////////////////////////////////////////// Stop &#34; + MotoRotate);&#10;" />
  </Algorithm>
  </BasicFB>
</FBType>
